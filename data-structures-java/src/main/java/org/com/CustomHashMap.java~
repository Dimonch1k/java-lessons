package org.com;

import java.util.Iterator;
import java.util.Random;
import java.util.random.RandomGenerator;

public class CustomHashMap
{
  private static class CustomNode
  {
    CustomNode prevNode;
    CustomNode nextNode;
    Integer    value;

    public CustomNode( Integer value ) {
      this.prevNode = null;
      this.nextNode = null;
      this.value = value;
    }

    public CustomNode( CustomNode prev, Integer value ) {
      this.prevNode = prev;
      this.nextNode = null;
      this.value = value;
    }

    public CustomNode( CustomNode prev, CustomNode next, Integer value ) {
      this.prevNode = prev;
      this.nextNode = next;
      this.value = value;
    }
  }

  private CustomNode[] nodes;

  public CustomHashMap( int initialNumber ) {
    this.nodes = new CustomNode[initialNumber];
  }

  public Integer get( int value ) {
    int arrayIndex = hashFunc( value );

    if ( this.nodes[arrayIndex] == null ) {
      return null;
    }

    if ( this.nodes[arrayIndex].value == value ) {
      return value;
    }

    CustomNode current = this.nodes[arrayIndex].nextNode;

    while ( current != null ) {
      if ( current.value == value ) {
        return value;
      }
      current = current.nextNode;
    }

    return null;
  }

  public boolean set( int value ) {
    int arrayIndex = hashFunc( value );

    if ( this.nodes[arrayIndex] == null ) {
      this.nodes[arrayIndex] = new CustomNode( value );
      return true;
    }

    if ( this.nodes[arrayIndex].value == value &&
         this.nodes[arrayIndex].nextNode == null ) {

      // Create new node and set previous for it
      this.nodes[arrayIndex].nextNode = new CustomNode(
        this.nodes[arrayIndex],
        value
      );

      return true;
    }

    CustomNode current = this.nodes[arrayIndex].nextNode;

    while ( current != null ) {
      if ( current.value == value ) {
        return value;
      }
      current = current.nextNode;
    }

    //    CustomNode newNode = new CustomNode( value );

    return false;
  }

  public boolean delete( int value ) {

    return false;
  }

  private int hashFunc( int value ) {
    return value % this.nodes.length;
  }
}

